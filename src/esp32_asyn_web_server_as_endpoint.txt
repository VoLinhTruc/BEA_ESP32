#include <Arduino.h>
#include <WiFi.h>
#include <SPIFFS.h>
#include "ESPAsyncWebServer.h"


#define LED_BUILTIN 2

void writeFile(const char * path, String message);
String readFile(const char * path);

const char* ssid = "ESP32-Access-Point";
const char* password = "123456789";

String html_request_upload ="<!DOCTYPE html>\
<html>\
<body>\
  <h2>File Upload</h2>\
  <form method=\"POST\" action=\"/upload\" enctype=\"multipart/form-data\">\
    <input type=\"file\" name=\"upload\">\
    <input type=\"submit\" value=\"Upload\">\
  </form>\
</body>\
</html>\
";

String html_confirm_upload_ok ="<!DOCTYPE html>\
<html>\
<body>\
  <h2>File Upload</h2>\
  <form method=\"POST\" action=\"/upload\" enctype=\"multipart/form-data\">\
    <input type=\"file\" name=\"upload\">\
    <input type=\"submit\" value=\"Upload\">\
  </form>\
  <hr>\
  <h2>File Upload OK</h2>\
</body>\
</html>\
";

String html_confirm_upload_failed ="<!DOCTYPE html>\
<html>\
<body>\
  <h2>File Upload</h2>\
  <form method=\"POST\" action=\"/upload\" enctype=\"multipart/form-data\">\
    <input type=\"file\" name=\"upload\">\
    <input type=\"submit\" value=\"Upload\">\
  </form>\
  <hr>\
  <h2>File Upload Failed</h2>\
</body>\
</html>\
";

AsyncWebServer async_server(80);

void handleUpload(AsyncWebServerRequest *request, String filename, size_t index, uint8_t *data, size_t len, bool final);

void setup() {
  pinMode(LED_BUILTIN, OUTPUT);

  // Initialize serial communication
  Serial.begin(115200);

  // Configure the ESP32 as an access point
  WiFi.softAP(ssid, password);

  // Print the IP address
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  async_server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/html", html_request_upload);
  });


  async_server.on("/upload", HTTP_POST, [](AsyncWebServerRequest *request){
  }, handleUpload);

  async_server.begin();

  // Initialize SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }
}



void loop() {
  Serial.println(".");
  // digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
  delay(1000);

  if (Serial.available() > 0)
  {
    String file_content_from_memory = readFile("/hex_file.hex");
    uint32_t file_from_memory_size = file_content_from_memory.length();

    for(uint32_t i = 0; i < file_from_memory_size; i++)
    {
      Serial.print(file_content_from_memory[i], HEX);
      Serial.print('\t');
      if ((i % 16) == 0)
      {
        Serial.println();
      }
    }

    while((Serial.available() > 0))
    {
      Serial.read();
    }
  }
}



void writeFile(const char * path, String message) {
  File file = SPIFFS.open(path, FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file for writing");
    return;
  }
  if (file.print(message)) {
    Serial.println("File written successfully");
  } else {
    Serial.println("Write failed");
  }
  file.close();
}


String readFile(const char * path) {
  String ret;
  File file = SPIFFS.open(path, FILE_READ);
  if (!file) {
    Serial.println("Failed to open file for reading");
    return "";
  }
  
  while (file.available()) {
    ret = file.readString();
  }
  file.close();

  return ret;
}


void handleUpload(AsyncWebServerRequest *request, String filename, size_t index, uint8_t *data, size_t len, bool final)
{
  String content = "";

  for(size_t i = 0; i < len; i++)
  {
    content += (char)(data[i]);
  }

  writeFile("/hex_file.hex", content);
  String file_content_from_memory = readFile("/hex_file.hex");
  uint32_t file_from_memory_size = file_content_from_memory.length();

  if ((content == file_content_from_memory) && (len == file_from_memory_size))
  {
    request->send(200, "text/html", html_confirm_upload_ok);
  }
  else
  {
    request->send(200, "text/html", html_confirm_upload_failed);
  }
}